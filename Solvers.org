
* Solvers Available

** lpsolve
   
   
* Benchmarks

** [[http://plato.asu.edu/bench.html][ASU Benchmarks]]
   Gurobi		  42	 1
   CLP			  42	 1
   GLOP			 326     7
   GLPK			1843	43
   lpSolve		5028   120
   

* Solvers
  Looking at the solvers, I must support the academic Gurobi solver.

  For open source, GLOP may make the most sense - otherwise GLPK



** Gurobi


** CLP - https://projects.coin-or.org/Clp AKA Coin-OT


** GLOP - https://developers.google.com/optimization/
   * Includes C++ / python interfaces to GLOP, plus CBC, CLP, GLPK, Gurobi, CPLEX, SCIP, and Sulum.


** GLPK - https://www.gnu.org/software/glpk/glpk.html
   * Open source, C interface only
   * Not threaded. Make each object a separate thread.
   * Not thread safe.
   * Almost reenter - needs few patches

** lpSolve
   * Oldest solver
   * Can run threaded - but each need a lpSolve object for each thread



* Phase?

  * Simple DEA

  * code with foreach?

  * DEA setting everything up with data to iterate on

  * Implement inner loop in C

  * Make inner lope parallel

  * Use abstracted interface to solver - ROI?

  * Multicore vs. multi-machine?

  * Idea - built a R data structure that represents the problem to be solved.
    * Send the structure and the indexs of the DMU's to solve for to each machine.
    * Figure out how big it needs to be to solve on multuple machines
    * Implement the code with an inner apply loop
    

  * Experiment on single phase version with small, medium & large data
    * Input: x, y, orientation, rts
      * Phase 2 - xt, yt
    * Output: eff, lambda
      * Phase 2 - dual
    * control: debug

    
  
